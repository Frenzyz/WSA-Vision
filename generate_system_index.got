// package assistant

// import (
// 	"fmt"
// 	"io/ioutil"
// 	"os"
// 	"path/filepath"
// 	"strings"
// )

// // GenerateSystemIndex scans common directories and generates the system_index.txt file.
// func GenerateSystemIndex(indexFilePath string) error {
// 	execDirs := []string{
// 		"C:\\Program Files",
// 		"C:\\Program Files (x86)",
// 		"C:\\Users\\%s\\AppData\\Roaming", // %s will be replaced by username
// 	}

// 	username, err := GetUsername()
// 	if err != nil {
// 		return fmt.Errorf("failed to get username: %v", err)
// 	}

// 	var indexEntries []string

// 	for _, dir := range execDirs {
// 		// Replace placeholder with actual username
// 		dir = fmt.Sprintf(dir, username)
// 		err := filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
// 			if err != nil {
// 				// Skip directories that can't be accessed
// 				return nil
// 			}
// 			if !info.IsDir() && strings.HasSuffix(strings.ToLower(info.Name()), ".exe") {
// 				execName := info.Name()
// 				indexEntries = append(indexEntries, fmt.Sprintf("%s: %s", execName, path))
// 			}
// 			return nil
// 		})
// 		if err != nil {
// 			// Log the error and continue with other directories
// 			fmt.Printf("Error walking through directory %s: %v\n", dir, err)
// 			continue
// 		}
// 	}

// 	// Write the index entries to the file
// 	indexContent := strings.Join(indexEntries, "\n")
// 	err = ioutil.WriteFile(indexFilePath, []byte(indexContent), 0644)
// 	if err != nil {
// 		return fmt.Errorf("failed to write system_index.txt: %v", err)
// 	}

// 	return nil
// }